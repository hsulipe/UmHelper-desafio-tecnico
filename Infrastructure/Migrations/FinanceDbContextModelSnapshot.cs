// <auto-generated />
using System;
using Infrastructure.Databases.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    partial class FinanceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Domain.Models.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("From")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<Guid>("To")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("From");

                    b.HasIndex("To");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("Domain.Models.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("CurrentBalance")
                        .HasColumnType("double precision");

                    b.Property<double>("InitialBalance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("user_account");
                });

            modelBuilder.Entity("Domain.Models.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.Models.Entities.UserAccount", "UserAccountFrom")
                        .WithMany("Sent")
                        .HasForeignKey("From")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entities.UserAccount", "UserAccountTo")
                        .WithMany("Received")
                        .HasForeignKey("To")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserAccountFrom");

                    b.Navigation("UserAccountTo");
                });

            modelBuilder.Entity("Domain.Models.Entities.UserAccount", b =>
                {
                    b.OwnsOne("Domain.Models.ValueObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("CpfNumber");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("user_account");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Domain.Models.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("user_account");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Domain.Models.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("bytea")
                                .HasColumnName("PasswordHash");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("bytea")
                                .HasColumnName("PasswordSalt");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("user_account");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("Cpf");

                    b.Navigation("Name");

                    b.Navigation("Password");
                });

            modelBuilder.Entity("Domain.Models.Entities.UserAccount", b =>
                {
                    b.Navigation("Received");

                    b.Navigation("Sent");
                });
#pragma warning restore 612, 618
        }
    }
}
